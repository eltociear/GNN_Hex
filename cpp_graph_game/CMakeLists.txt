list(APPEND CMAKE_PREFIX_PATH "/usr/local/include/libtorch")
cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(test_torch_script)

option(WITH_CUDA "Enable CUDA support" ON)

find_package(Torch REQUIRED)
find_package(TorchScatter REQUIRED)
find_package(TorchSparse REQUIRED)

if (WITH_CUDA)
find_package(CUDAToolkit REQUIRED)
endif()

add_definitions(-DFOR_INFERENCE)
add_executable(test_torch_script test_torch_script.cpp)
target_compile_features(test_torch_script PUBLIC cxx_range_for)
target_link_libraries(test_torch_script TorchScatter::TorchScatter)
target_link_libraries(test_torch_script TorchSparse::TorchSparse)
target_link_libraries(test_torch_script "${TORCH_LIBRARIES}")
if (WITH_CUDA)
target_link_libraries(test_torch_script CUDA::cusparse)
endif()
set_property(TARGET test_torch_script PROPERTY CXX_STANDARD 17)

add_executable(test_env test_env.cpp)
target_compile_features(test_env PUBLIC cxx_range_for)
target_link_libraries(test_env TorchScatter::TorchScatter)
target_link_libraries(test_env TorchSparse::TorchSparse)
target_link_libraries(test_env "${TORCH_LIBRARIES}")
if (WITH_CUDA)
target_link_libraries(test_env CUDA::cusparse)
endif()
set_property(TARGET test_env PROPERTY CXX_STANDARD 17)

add_executable(speedtest speedtest.cpp)
target_compile_features(speedtest PUBLIC cxx_range_for)
target_link_libraries(speedtest TorchScatter::TorchScatter)
target_link_libraries(speedtest TorchSparse::TorchSparse)
target_link_libraries(speedtest "${TORCH_LIBRARIES}")
if (WITH_CUDA)
target_link_libraries(speedtest CUDA::cusparse)
endif()

add_executable(tests tests.cpp)
target_compile_features(tests PUBLIC cxx_range_for)
target_link_libraries(tests TorchScatter::TorchScatter)
target_link_libraries(tests TorchSparse::TorchSparse)
target_link_libraries(tests "${TORCH_LIBRARIES}")
if (WITH_CUDA)
target_link_libraries(tests CUDA::cusparse)
endif()

add_executable(test_my_graph test_my_graph.cpp)
target_compile_features(test_my_graph PUBLIC cxx_range_for)
target_link_libraries(test_my_graph TorchScatter::TorchScatter)
target_link_libraries(test_my_graph TorchSparse::TorchSparse)
target_link_libraries(test_my_graph "${TORCH_LIBRARIES}")
if (WITH_CUDA)
target_link_libraries(test_my_graph CUDA::cusparse)
endif()
